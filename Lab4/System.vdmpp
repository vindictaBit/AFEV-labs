class System

instance variables
private Purses: map Purse`CardId to Purse;
inv forall p in set dom Purses & Purses(p).GetCardNo() = p;

private Log: seq of Transaction := [];

types
public Transaction :: 
  fromId : Purse`CardId
  toId   : Purse`CardId
  sum    : nat;

operations
public Transfer: Purse`CardId * Purse`CardId * nat ==> ()
Transfer(fromId, toId, sum) ==
(
  Purses(fromId).DecreaseBal(sum);
  Purses(toId).IncreaseBal(sum);
  Log := Log ^ [mk_Transaction(fromId, toId, sum)]
)
pre {fromId, toId} subset dom Purses and
    fromId <> toId and
    Purses(fromId).GetBalance() >= sum;

public System: set of Purse ==> System
System(purseSet) ==
(
  Purses := {p.GetCardNo() |-> p | p in set purseSet}
)
pre forall p, q in set purseSet & p <> q => p.GetCardNo() <> q.GetCardNo();

public TotalTransferred: () ==> nat
TotalTransferred() ==
  return Totalsum(Log);

functions
Totalsum: seq of Transaction -> nat
Totalsum(tseq) ==
  if tseq = []
  then 0
  else let tx = hd tseq in tx.sum + Totalsum(tl tseq);

end System
